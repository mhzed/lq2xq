"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const luceneQueryParser_1 = require("./luceneQuery/luceneQueryParser");
const _ = require("lodash");
const DefaultRenderOption = {
    defaultField: '.',
    termPhraseModifier: null
};
;
;
class RenderContext {
    constructor(option, hasField) {
        this.warnigs = [];
        this.option = option;
        this.hasField = hasField;
    }
}
const renderField = (term, ctx) => {
    if (ctx.hasField) {
        let fieldname;
        if (term.field != null)
            fieldname = term.field.field;
        else
            fieldname = ctx.option.defaultField;
        return `${fieldname} contains text `;
    }
    else
        return "";
};
const convertWildCard = (term) => {
    if (/[*?]/.test(term)) {
        return term.replace(/([*])/g, ".*").replace(/[?]/g, ".");
    }
    else
        return null;
};
const renderTerm = (term, ctx) => {
    let result;
    let wildCardTerm = convertWildCard(term.term);
    if (wildCardTerm != null)
        result = `(${renderField(term, ctx)}"${wildCardTerm}" using wildcards`;
    else
        result = `(${renderField(term, ctx)}"${term.term}"`;
    if (term.boost != null)
        result += ` weight {${term.boost}}`;
    if (term.similarity != null) {
        if (ctx.option.similarityConverter == null)
            throw new Error("Similarity is not supported");
        else
            result += ` ${ctx.option.similarityConverter(term.similarity)}`;
    }
    if (ctx.option.termPhraseModifier)
        result += ` ${ctx.option.termPhraseModifier}`;
    result += ")";
    return result;
};
const renderPhrase = (phrase, ctx) => {
    let result = `(${renderField(phrase, ctx)}"${phrase.term}"`;
    if (phrase.boost != null)
        result += ` weight {${phrase.boost}}`;
    if (phrase.proximity != null)
        result += ` distance at most ${phrase.proximity} words`;
    if (ctx.option.termPhraseModifier)
        result += ` ${ctx.option.termPhraseModifier}`;
    result += ")";
    return result;
};
const renderOperator = (op, ctx) => {
    switch (op) {
        case 'AND': return ctx.hasField ? 'AND' : 'ftand';
        case 'OR': return ctx.hasField ? 'OR' : 'ftor';
        default: throw new Error(`Operator ${op} is not recognized.`);
    }
};
const renderRange = (range, ctx) => {
    if (range.field == null)
        throw new Error("Must specify field on range query");
    let field = range.field.field;
    let ops = range.inclusive ? ['>=', '<='] : ['>', '<'];
    return `(${field}${ops[0]}"${range.term_min}" AND ${field}${ops[1]}"${range.term_max}")`;
};
const renderExpr = (expr, ctx) => {
    if (expr.operator == 'NOT') {
        throw new Error("Lucene query's NOT operator is broken, see https://stackoverflow.com/questions/17969461/" +
            "not-operator-doesnt-work-in-query-lucene, use - modifier instead");
    }
    return `(${render(expr.left, ctx)} ${renderOperator(expr.operator, ctx)} ${render(expr.right, ctx)})`;
};
const isSameField = (t1, t2) => {
    if (t1.field === t2.field)
        return true; // both null
    else if (t1.field && t2.field)
        return t1.field.field == t2.field.field;
    else
        return false;
};
const isTerm = (node) => _.has(node, "similarity");
const isPhrase = (node) => _.has(node, "proximity");
const isTermOrPhrase = (node) => isTerm(node) || isPhrase(node);
const isRange = (node) => _.has(node, 'inclusive');
const hasOperator = (node) => (true && node.operator);
const hasLeft = (node) => true && node.left;
const render = (tree, ctx) => {
    if (tree === undefined)
        return '';
    else if (isTerm(tree))
        return renderTerm(tree, ctx);
    else if (isPhrase(tree))
        return renderPhrase(tree, ctx);
    else if (isRange(tree))
        return renderRange(tree, ctx);
    else if (hasOperator(tree))
        return renderExpr(tree, ctx); // binary or unary expression
    else if (hasLeft(tree))
        return render(tree.left, ctx); // an operator-less (single term) expression
    else
        throw new Error(`${JSON.stringify(tree, null, '  ')} can't be rendered`);
};
// scan tree recursively to see if any field exists
const hasField = (tree) => {
    if (tree === undefined)
        return false;
    else
        return tree.field != null || hasField(tree.left) || hasField(tree.right);
};
const pressField = (tree) => {
    if (tree) {
        if (tree.field) {
            if (tree.left)
                tree.left.field = tree.field;
            if (tree.right)
                tree.right.field = tree.field;
        }
        if (tree.left)
            pressField(tree.left);
        if (tree.right)
            pressField(tree.right);
    }
};
const hasAnd = (tree) => {
    if (tree === undefined)
        return false;
    else
        return tree.operator === 'AND' || hasAnd(tree.left) || hasAnd(tree.right);
};
const hasPrefix = (tree) => {
    if (tree === undefined)
        return false;
    else
        return (tree.prefix) || hasPrefix(tree.left) || hasPrefix(tree.right);
};
const reconstructClauses = (tree, musts, mustnots) => {
    if (tree) {
        if (tree.prefix) {
            if (tree.prefix == '+')
                musts.push(tree);
            else if (tree.prefix == '-')
                mustnots.push(tree);
        }
        else if (isRange(tree)) {
            musts.push(tree);
        }
        reconstructClauses(tree.left, musts, mustnots);
        reconstructClauses(tree.right, musts, mustnots);
    }
};
/**
 *
 * lucene query to xquery translater
 *
 * @param {string} lq
 * @returns {string}
 *
 */
exports.lq2xq = (lq, option) => {
    let tree = luceneQueryParser_1.luceneQueryParser.parse(lq);
    if (!option)
        option = DefaultRenderOption;
    else
        option = _.assign({}, DefaultRenderOption, option); // ensure default values are filled
    let hasFieldInExr = hasField(tree);
    if (hasFieldInExr)
        pressField(tree); // ensure field is set in every Term or Phrase, instead of Expression
    let result = '';
    if (!hasFieldInExr)
        result += `${option.defaultField} contains text `;
    if (hasPrefix(tree)) {
        // if there are + or -, then we ignore all logical operators such as AND OR NOT, they are incompatible
        let pluses = [], minuses = [];
        reconstructClauses(tree, pluses, minuses);
        if (!hasFieldInExr) {
            let plusExprs = _.map(pluses, (p) => render(p, new RenderContext(option, hasFieldInExr)));
            let minusExprs = _.map(minuses, (p) => 'ftnot ' + render(p, new RenderContext(option, hasFieldInExr)));
            result += _.join(_.concat(plusExprs, minusExprs), ' ftand ');
        }
        else {
            //console.log(JSON.stringify(tree, null, '  '));
            let plusExprs = _.map(pluses, (p) => render(p, new RenderContext(option, hasFieldInExr)));
            let minusExprs = _.map(minuses, (p) => 'not' + render(p, new RenderContext(option, hasFieldInExr)));
            result += _.join(_.concat(plusExprs, minusExprs), ' AND ');
        }
    }
    else {
        result += render(tree, new RenderContext(option, hasFieldInExr));
    }
    return result;
};
//# sourceMappingURL=data:application/json;base64,