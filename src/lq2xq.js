"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const luceneQueryParser_1 = require("./luceneQuery/luceneQueryParser");
const _ = require("lodash");
const DefaultRenderOption = {
    defaultField: '.',
    termPhraseModifier: null
};
class RenderContext {
    constructor(option, hasField) {
        this.option = option;
        this.hasField = hasField;
    }
}
const renderField = (term, ctx) => {
    if (ctx.hasField) {
        let fieldname;
        if (term.field != null)
            fieldname = term.field.field;
        else
            fieldname = ctx.option.defaultField;
        return `${fieldname} contains text `;
    }
    else
        return "";
};
const convertWildCard = (term) => {
    if (/[*?]/.test(term)) {
        return term.replace(/([*])/g, ".*").replace(/[?]/g, ".");
    }
    else
        return null;
};
const renderTerm = (term, ctx) => __awaiter(this, void 0, void 0, function* () {
    if (ctx.option.termPhraseExpander) {
        let expr = _(yield ctx.option.termPhraseExpander(term.term, term.field ? term.field.field : null, false))
            .map((newTerm) => renderTermClause(_.assign({}, term, { term: newTerm }), ctx))
            .join(' ftor ');
        return `(${renderField(term, ctx)}${expr})`;
    }
    else
        return `(${renderField(term, ctx)}${renderTermClause(term, ctx)})`;
});
const renderTermClause = (term, ctx) => {
    let result;
    let wildCardTerm = convertWildCard(term.term);
    if (wildCardTerm != null)
        result = `"${wildCardTerm}" using wildcards`;
    else
        result = `"${term.term}"`;
    if (term.boost != null)
        result += ` weight {${term.boost}}`;
    if (term.similarity != null) {
        if (ctx.option.similarityConverter == null)
            throw new Error("Similarity is not supported");
        else
            result += ` ${ctx.option.similarityConverter(term.similarity)}`;
    }
    if (ctx.option.termPhraseModifier)
        result += ` ${ctx.option.termPhraseModifier}`;
    return result;
};
const renderPhrase = (phrase, ctx) => __awaiter(this, void 0, void 0, function* () {
    if (ctx.option.termPhraseExpander) {
        let expr = _(yield ctx.option.termPhraseExpander(phrase.term, phrase.field ? phrase.field.field : null, false))
            .map((newPhrase) => renderPhraseClause(_.assign({}, phrase, { term: newPhrase }), ctx))
            .join(' ftor ');
        return `(${renderField(phrase, ctx)}${expr})`;
    }
    else
        return `(${renderField(phrase, ctx)}${renderPhraseClause(phrase, ctx)})`;
});
const renderPhraseClause = (phrase, ctx) => {
    let result = `"${phrase.term}"`;
    if (phrase.boost != null)
        result += ` weight {${phrase.boost}}`;
    if (phrase.proximity != null)
        result += ` distance at most ${phrase.proximity} words`;
    if (ctx.option.termPhraseModifier)
        result += ` ${ctx.option.termPhraseModifier}`;
    return result;
};
const renderOperator = (op, ctx) => {
    switch (op) {
        case 'AND': return ctx.hasField ? 'AND' : 'ftand';
        case 'OR': return ctx.hasField ? 'OR' : 'ftor';
        default: throw new Error(`Operator ${op} is not recognized.`);
    }
};
const renderRange = (range, ctx) => {
    if (range.field == null)
        throw new Error("Must specify field on range query");
    let field = range.field.field;
    let ops = range.inclusive ? ['>=', '<='] : ['>', '<'];
    return `(${field}${ops[0]}"${range.term_min}" AND ${field}${ops[1]}"${range.term_max}")`;
};
const renderExpr = (expr, ctx) => __awaiter(this, void 0, void 0, function* () {
    if (expr.operator == 'NOT') {
        throw new Error("Lucene query's NOT operator is broken, see https://stackoverflow.com/questions/17969461/" +
            "not-operator-doesnt-work-in-query-lucene, use - modifier instead");
    }
    return `(${yield render(expr.left, ctx)} ${renderOperator(expr.operator, ctx)} ${yield render(expr.right, ctx)})`;
});
const isSameField = (t1, t2) => {
    if (t1.field === t2.field)
        return true; // both null
    else if (t1.field && t2.field)
        return t1.field.field == t2.field.field;
    else
        return false;
};
const isTerm = (node) => _.has(node, "similarity");
const isPhrase = (node) => _.has(node, "proximity");
const isTermOrPhrase = (node) => isTerm(node) || isPhrase(node);
const isRange = (node) => _.has(node, 'inclusive');
const hasOperator = (node) => (true && node.operator);
const hasLeft = (node) => true && node.left;
const render = (tree, ctx) => __awaiter(this, void 0, void 0, function* () {
    if (tree === undefined)
        return '';
    else if (isTerm(tree))
        return yield renderTerm(tree, ctx);
    else if (isPhrase(tree))
        return yield renderPhrase(tree, ctx);
    else if (isRange(tree))
        return renderRange(tree, ctx);
    else if (hasOperator(tree))
        return yield renderExpr(tree, ctx); // binary or unary expression
    else if (hasLeft(tree))
        return yield render(tree.left, ctx); // an operator-less (single term) expression
    else
        throw new Error(`${JSON.stringify(tree, null, '  ')} can't be rendered`);
});
// scan tree recursively to see if any field exists
const hasField = (tree) => {
    if (tree === undefined)
        return false;
    else
        return tree.field != null || hasField(tree.left) || hasField(tree.right);
};
const pressField = (tree) => {
    if (tree) {
        if (tree.field) {
            if (tree.left)
                tree.left.field = tree.field;
            if (tree.right)
                tree.right.field = tree.field;
        }
        if (tree.left)
            pressField(tree.left);
        if (tree.right)
            pressField(tree.right);
    }
};
const hasAnd = (tree) => {
    if (tree === undefined)
        return false;
    else
        return tree.operator === 'AND' || hasAnd(tree.left) || hasAnd(tree.right);
};
const hasPrefix = (tree) => {
    if (tree === undefined)
        return false;
    else
        return (tree.prefix) || hasPrefix(tree.left) || hasPrefix(tree.right);
};
const reconstructClauses = (tree, musts, mustnots) => {
    if (tree) {
        if (tree.prefix) {
            if (tree.prefix == '+')
                musts.push(tree);
            else if (tree.prefix == '-')
                mustnots.push(tree);
        }
        else if (isRange(tree)) {
            musts.push(tree);
        }
        reconstructClauses(tree.left, musts, mustnots);
        reconstructClauses(tree.right, musts, mustnots);
    }
};
/**
 *
 * lucene query to xquery translater
 *
 * @param {string} lq
 * @returns {string}
 *
 */
exports.lq2xq = (lq, option) => __awaiter(this, void 0, void 0, function* () {
    let tree = luceneQueryParser_1.luceneQueryParser.parse(lq);
    if (!option)
        option = DefaultRenderOption;
    else
        option = _.assign({}, DefaultRenderOption, option); // ensure default values are filled
    let hasFieldInExr = hasField(tree);
    if (hasFieldInExr)
        pressField(tree); // ensure field is set in every Term or Phrase, instead of Expression
    let result = '';
    if (!hasFieldInExr)
        result += `${option.defaultField} contains text `;
    if (hasPrefix(tree)) {
        // if there are + or -, then we ignore all logical operators such as AND OR NOT, they are incompatible
        let pluses = [], minuses = [];
        reconstructClauses(tree, pluses, minuses);
        if (!hasFieldInExr) {
            let plusExprs = yield Promise.all(_.map(pluses, (p) => render(p, new RenderContext(option, hasFieldInExr))));
            let minusExprs = yield Promise.all(_.map(minuses, (p) => render(p, new RenderContext(option, hasFieldInExr))));
            minusExprs = _.map(minusExprs, (e) => 'ftnot ' + e);
            result += _.join(_.concat(plusExprs, minusExprs), ' ftand ');
        }
        else {
            //console.log(JSON.stringify(tree, null, '  '));
            let plusExprs = yield Promise.all(_.map(pluses, (p) => render(p, new RenderContext(option, hasFieldInExr))));
            let minusExprs = yield Promise.all(_.map(minuses, (p) => render(p, new RenderContext(option, hasFieldInExr))));
            minusExprs = _.map(minusExprs, (e) => 'not' + e);
            result += _.join(_.concat(plusExprs, minusExprs), ' AND ');
        }
    }
    else {
        result += yield render(tree, new RenderContext(option, hasFieldInExr));
    }
    return result;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHEyeHEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJscTJ4cS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsdUVBQWtFO0FBQ2xFLDRCQUE0QjtBQTZCNUIsTUFBTSxtQkFBbUIsR0FBbUI7SUFDMUMsWUFBWSxFQUFFLEdBQUc7SUFDakIsa0JBQWtCLEVBQUUsSUFBSTtDQUN6QixDQUFDO0FBbUNGO0lBR0UsWUFBWSxNQUFxQixFQUFFLFFBQWlCO1FBQ2xELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQUVELE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBYyxFQUFFLEdBQWtCO0lBQ3JELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksU0FBa0IsQ0FBQztRQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQztZQUNyQixTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSTtZQUNGLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLGlCQUFpQixDQUFDO0lBQ3ZDLENBQUM7SUFBQyxJQUFJO1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxDQUFDLElBQVk7SUFDbkMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJ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